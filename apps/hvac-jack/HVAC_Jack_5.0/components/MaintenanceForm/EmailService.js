// components/MaintenanceForm/EmailService.js
// Email Service for HVAC Jack 4.0 Maintenance Form Reports
// Handles email distribution with PDF attachments and mobile optimization

class EmailService {
    constructor() {
        this.emailEndpoint = '/.netlify/functions/email-service'; // Netlify function endpoint
        this.templateCache = new Map();
        this.deliveryHistory = [];
        
        // Email configuration
        this.config = {
            maxRetries: 3,
            retryDelay: 2000,
            maxAttachmentSize: 10 * 1024 * 1024, // 10MB
            supportedFormats: ['pdf', 'html'],
            defaultSubject: 'HVAC Maintenance Report',
            fromEmail: 'reports@hvacjack.com',
            fromName: 'HVAC Jack 4.0'
        };
        
        // Email templates
        this.templates = {
            customer: {
                subject: 'Your HVAC Maintenance Report - {customerName}',
                greeting: 'Dear {customerName},',
                body: `Thank you for choosing our HVAC maintenance services. Please find attached your completed maintenance report for the service performed on {serviceDate}.

This comprehensive report includes:
• Pre-service inspection results
• Combustion analysis and performance testing
• Critical safety inspection findings
• Maintenance actions performed
• Technician recommendations

{nextMaintenanceReminder}

If you have any questions about this report or need to schedule future service, please don't hesitate to contact us.

Best regards,
{technicianName}
{companyName}

---
This report was generated by HVAC Jack 4.0 Professional Service Platform
Report ID: {reportId}`
            },
            company: {
                subject: 'Service Report - {customerName} - {serviceDate}',
                greeting: 'Service Team,',
                body: `Service report for {customerName} has been completed and sent to customer.

Service Details:
• Customer: {customerName}
• Address: {serviceAddress}
• Service Date: {serviceDate}
• Technician: {technicianName}
• Service Time: {serviceTime} hours
• Status: {serviceStatus}

{criticalIssues}

Report attached for records.

Generated by HVAC Jack 4.0
Report ID: {reportId}`
            }
        };
    }

    /**
     * Send maintenance report via email
     * @param {Object} formData - Complete form data
     * @param {Object} options - Email options
     */
    async sendMaintenanceReport(formData, options = {}) {
        try {
            // Show loading indicator
            this.showLoadingIndicator();

            // Validate required data
            this.validateEmailData(formData);

            // Generate PDF attachment
            const pdfData = await this.generatePDFAttachment(formData);

            // Prepare email recipients
            const recipients = this.prepareRecipients(formData);

            // Send emails
            const results = await this.sendEmails(formData, recipients, pdfData, options);

            // Hide loading indicator
            this.hideLoadingIndicator();

            // Show success notification
            this.showSuccessNotification(results);

            // Track delivery
            this.trackEmailDelivery(results, formData);

            return results;

        } catch (error) {
            console.error('Email service error:', error);
            this.hideLoadingIndicator();
            this.showErrorNotification(error.message);
            throw error;
        }
    }

    /**
     * Validate email data
     */
    validateEmailData(formData) {
        const errors = [];

        // Check for customer email if customer delivery is requested
        if (formData['email-customer'] && !formData['customer-email']) {
            errors.push('Customer email address is required');
        }

        // Check for company email if company delivery is requested
        if (formData['email-company'] && !formData['company-email']) {
            errors.push('Company email address is required');
        }

        // Validate email format
        const emailFields = ['customer-email', 'company-email'];
        emailFields.forEach(field => {
            if (formData[field] && !this.isValidEmail(formData[field])) {
                errors.push(`Invalid email format: ${formData[field]}`);
            }
        });

        // Check if at least one recipient is selected
        if (!formData['email-customer'] && !formData['email-company']) {
            errors.push('At least one email recipient must be selected');
        }

        if (errors.length > 0) {
            throw new Error('Email validation failed:\n' + errors.join('\n'));
        }
    }

    /**
     * Generate PDF attachment
     */
    async generatePDFAttachment(formData) {
        try {
            // Create PDF generator instance
            if (typeof MaintenanceFormPDF === 'undefined') {
                throw new Error('PDF generator not available');
            }

            const pdfGenerator = new MaintenanceFormPDF();
            
            // Generate PDF as blob
            const pdfBlob = await pdfGenerator.generateBlob(formData);
            
            // Convert to base64 for email attachment
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => {
                    const base64Data = reader.result.split(',')[1]; // Remove data:application/pdf;base64, prefix
                    resolve({
                        data: base64Data,
                        filename: pdfGenerator.generateFilename(formData),
                        mimetype: 'application/pdf',
                        size: pdfBlob.size
                    });
                };
                reader.onerror = reject;
                reader.readAsDataURL(pdfBlob);
            });

        } catch (error) {
            console.error('PDF generation for email failed:', error);
            throw new Error('Failed to generate PDF attachment: ' + error.message);
        }
    }

    /**
     * Prepare email recipients
     */
    prepareRecipients(formData) {
        const recipients = [];

        // Customer email
        if (formData['email-customer'] && formData['customer-email']) {
            recipients.push({
                type: 'customer',
                email: formData['customer-email'],
                name: formData['customer-name'] || 'Valued Customer'
            });
        }

        // Company email
        if (formData['email-company'] && formData['company-email']) {
            recipients.push({
                type: 'company',
                email: formData['company-email'],
                name: 'Service Team'
            });
        }

        return recipients;
    }

    /**
     * Send emails to all recipients
     */
    async sendEmails(formData, recipients, pdfData, options) {
        const results = [];
        
        for (const recipient of recipients) {
            try {
                const emailContent = this.generateEmailContent(recipient.type, formData, options);
                
                const emailRequest = {
                    to: {
                        email: recipient.email,
                        name: recipient.name
                    },
                    from: {
                        email: this.config.fromEmail,
                        name: this.config.fromName
                    },
                    subject: emailContent.subject,
                    htmlContent: emailContent.html,
                    textContent: emailContent.text,
                    attachments: [{
                        name: pdfData.filename,
                        content: pdfData.data,
                        type: pdfData.mimetype
                    }],
                    metadata: {
                        reportId: this.generateReportId(),
                        customerName: formData['customer-name'],
                        serviceDate: formData['service-date'],
                        recipientType: recipient.type
                    }
                };

                const result = await this.deliverEmail(emailRequest);
                results.push({
                    recipient: recipient,
                    success: true,
                    messageId: result.messageId,
                    timestamp: new Date().toISOString()
                });

            } catch (error) {
                console.error(`Failed to send email to ${recipient.email}:`, error);
                results.push({
                    recipient: recipient,
                    success: false,
                    error: error.message,
                    timestamp: new Date().toISOString()
                });
            }
        }

        return results;
    }

    /**
     * Generate email content based on recipient type
     */
    generateEmailContent(recipientType, formData, options) {
        const template = this.templates[recipientType] || this.templates.customer;
        
        // Prepare template variables
        const variables = {
            customerName: formData['customer-name'] || 'Valued Customer',
            serviceDate: formData['service-date'] || new Date().toLocaleDateString(),
            serviceAddress: formData['service-address'] || 'N/A',
            technicianName: formData['technician-name'] || 'HVAC Technician',
            companyName: 'HVAC Jack Professional Services',
            serviceTime: formData['service-time'] || 'N/A',
            serviceStatus: this.formatServiceStatus(formData['service-status']),
            reportId: this.generateReportId(),
            nextMaintenanceReminder: this.generateMaintenanceReminder(formData),
            criticalIssues: this.formatCriticalIssues(formData)
        };

        // Process subject line
        let subject = options.customSubject || template.subject;
        subject = this.replaceVariables(subject, variables);

        // Process email body
        let bodyText = template.greeting + '\n\n' + template.body;
        bodyText = this.replaceVariables(bodyText, variables);

        // Generate HTML version
        const htmlContent = this.generateHTMLContent(bodyText, variables, recipientType);

        return {
            subject: subject,
            text: bodyText,
            html: htmlContent
        };
    }

    /**
     * Generate HTML email content
     */
    generateHTMLContent(textContent, variables, recipientType) {
        const isCustomer = recipientType === 'customer';
        
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>HVAC Maintenance Report</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 600px;
                    margin: 0 auto;
                    padding: 20px;
                }
                .header {
                    background: linear-gradient(135deg, #2c5282 0%, #3182ce 100%);
                    color: white;
                    padding: 20px;
                    border-radius: 10px 10px 0 0;
                    text-align: center;
                }
                .logo {
                    font-size: 24px;
                    font-weight: bold;
                    margin-bottom: 5px;
                }
                .tagline {
                    font-size: 14px;
                    opacity: 0.9;
                }
                .content {
                    background: #f8f9fa;
                    padding: 30px;
                    border-radius: 0 0 10px 10px;
                    border: 1px solid #e2e8f0;
                    border-top: none;
                }
                .greeting {
                    font-size: 18px;
                    color: #2c5282;
                    margin-bottom: 20px;
                }
                .message {
                    white-space: pre-line;
                    margin-bottom: 20px;
                }
                .highlight-box {
                    background: ${isCustomer ? '#e6f3ff' : '#fff7ed'};
                    border-left: 4px solid ${isCustomer ? '#3182ce' : '#f59e0b'};
                    padding: 15px;
                    margin: 20px 0;
                    border-radius: 0 5px 5px 0;
                }
                .service-details {
                    background: white;
                    padding: 15px;
                    border-radius: 5px;
                    margin: 15px 0;
                    border: 1px solid #e2e8f0;
                }
                .service-details h4 {
                    color: #2c5282;
                    margin: 0 0 10px 0;
                }
                .footer {
                    text-align: center;
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #e2e8f0;
                    color: #666;
                    font-size: 12px;
                }
                .button {
                    display: inline-block;
                    background: #2c5282;
                    color: white;
                    padding: 12px 24px;
                    text-decoration: none;
                    border-radius: 5px;
                    margin: 10px 0;
                    font-weight: 600;
                }
                .attachment-notice {
                    background: #f0fff4;
                    border: 1px solid #68d391;
                    padding: 10px;
                    border-radius: 5px;
                    margin: 15px 0;
                    text-align: center;
                }
                @media (max-width: 600px) {
                    body { padding: 10px; }
                    .content { padding: 20px; }
                    .button { display: block; text-align: center; }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="logo">🔧 HVAC Jack 4.0</div>
                <div class="tagline">Professional HVAC Service Solutions</div>
            </div>
            
            <div class="content">
                <div class="greeting">${variables.customerName === 'Valued Customer' ? 'Hello!' : `Dear ${variables.customerName},`}</div>
                
                <div class="message">${textContent.replace(/^Dear.*?,\s*\n*/m, '')}</div>
                
                <div class="highlight-box">
                    <strong>📋 Report Details:</strong><br>
                    Service Date: ${variables.serviceDate}<br>
                    ${variables.serviceAddress !== 'N/A' ? `Service Address: ${variables.serviceAddress}<br>` : ''}
                    Technician: ${variables.technicianName}<br>
                    Report ID: ${variables.reportId}
                </div>
                
                <div class="attachment-notice">
                    <strong>📎 PDF Report Attached</strong><br>
                    Your detailed maintenance report is attached to this email as a PDF document.
                </div>
                
                ${isCustomer ? `
                <div class="service-details">
                    <h4>🛠️ What's Included in Your Report:</h4>
                    • Pre-service inspection checklist<br>
                    • Combustion analysis and performance testing<br>
                    • Critical safety inspection results<br>
                    • Maintenance actions performed<br>
                    • Technician recommendations<br>
                    • Digital signatures and certifications
                </div>
                ` : ''}
                
                ${variables.nextMaintenanceReminder ? `
                <div class="highlight-box">
                    <strong>📅 Next Maintenance Reminder:</strong><br>
                    ${variables.nextMaintenanceReminder}
                </div>
                ` : ''}
            </div>
            
            <div class="footer">
                <p>This email was generated automatically by HVAC Jack 4.0 Professional Service Platform.</p>
                <p>For support or questions, please contact your service provider.</p>
            </div>
        </body>
        </html>
        `;
    }

    /**
     * Replace template variables
     */
    replaceVariables(template, variables) {
        return template.replace(/\{(\w+)\}/g, (match, key) => {
            return variables[key] || match;
        });
    }

    /**
     * Format service status for email
     */
    formatServiceStatus(status) {
        const statusMap = {
            'completed': '✅ Service Completed Successfully',
            'follow-up': '⏰ Service Completed - Follow-up Required',
            'safety-issue': '🚨 Service Incomplete - Safety Issue Identified',
            'parts-required': '🔧 Service Incomplete - Parts Required'
        };
        
        return statusMap[status] || status || 'Service Status Not Specified';
    }

    /**
     * Generate maintenance reminder text
     */
    generateMaintenanceReminder(formData) {
        if (!formData['auto-schedule-reminder'] || !formData['next-maintenance']) {
            return '';
        }
        
        const nextDate = new Date(formData['next-maintenance']).toLocaleDateString();
        return `🔔 Reminder: Your next scheduled maintenance is recommended for ${nextDate}. We'll send you a reminder closer to that date.`;
    }

    /**
     * Format critical issues for company email
     */
    formatCriticalIssues(formData) {
        const criticalItems = [
            'safety-heat-exchanger',
            'safety-flue',
            'safety-co-test',
            'safety-gas-valve',
            'safety-limit-switch',
            'safety-flame-sensor'
        ];
        
        const failedSafetyChecks = criticalItems.filter(item => !formData[item]);
        
        if (failedSafetyChecks.length > 0) {
            return `\n⚠️ ATTENTION: ${failedSafetyChecks.length} critical safety item(s) require follow-up.\nReview attached report for details.`;
        }
        
        return '\n✅ All critical safety checks completed successfully.';
    }

    /**
     * Deliver email via Netlify function
     */
    async deliverEmail(emailRequest) {
        const maxRetries = this.config.maxRetries;
        let lastError;
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                const response = await fetch(this.emailEndpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        ...emailRequest,
                        attempt: attempt,
                        maxRetries: maxRetries
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(`HTTP ${response.status}: ${errorData.error || 'Email delivery failed'}`);
                }

                const result = await response.json();
                return result;

            } catch (error) {
                lastError = error;
                console.warn(`Email delivery attempt ${attempt} failed:`, error);
                
                if (attempt < maxRetries) {
                    // Wait before retrying
                    await new Promise(resolve => setTimeout(resolve, this.config.retryDelay * attempt));
                }
            }
        }
        
        throw new Error(`Email delivery failed after ${maxRetries} attempts: ${lastError.message}`);
    }

    /**
     * Validate email address format
     */
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    /**
     * Generate unique report ID
     */
    generateReportId() {
        return `HJ-${Date.now().toString(36).toUpperCase()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;
    }

    /**
     * Show loading indicator
     */
    showLoadingIndicator() {
        const indicator = document.createElement('div');
        indicator.id = 'email-loading-indicator';
        indicator.className = 'email-loading-overlay';
        indicator.innerHTML = `
            <div class="email-loading-content">
                <div class="email-spinner"></div>
                <h3>Sending Email Report...</h3>
                <p>Generating PDF and delivering to recipients</p>
                <div class="progress-steps">
                    <div class="step active">📄 Generating PDF</div>
                    <div class="step">📧 Preparing Emails</div>
                    <div class="step">🚀 Sending</div>
                </div>
            </div>
        `;
        
        // Add styles
        const style = document.createElement('style');
        style.textContent = `
            .email-loading-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(5px);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 9999;
                color: white;
            }
            .email-loading-content {
                text-align: center;
                background: rgba(44, 82, 130, 0.95);
                padding: 40px;
                border-radius: 15px;
                max-width: 400px;
                width: 90%;
            }
            .email-spinner {
                width: 50px;
                height: 50px;
                border: 4px solid rgba(255, 255, 255, 0.3);
                border-top: 4px solid #fff;
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin: 0 auto 20px;
            }
            .progress-steps {
                margin-top: 20px;
                display: flex;
                flex-direction: column;
                gap: 8px;
            }
            .step {
                padding: 8px;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 5px;
                font-size: 14px;
                opacity: 0.6;
                transition: all 0.3s ease;
            }
            .step.active {
                opacity: 1;
                background: rgba(255, 255, 255, 0.2);
                transform: scale(1.02);
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(indicator);
        
        // Simulate progress steps
        setTimeout(() => {
            const steps = indicator.querySelectorAll('.step');
            steps[0].classList.remove('active');
            steps[1].classList.add('active');
        }, 2000);
        
        setTimeout(() => {
            const steps = indicator.querySelectorAll('.step');
            steps[1].classList.remove('active');
            steps[2].classList.add('active');
        }, 4000);
    }

    /**
     * Hide loading indicator
     */
    hideLoadingIndicator() {
        const indicator = document.getElementById('email-loading-indicator');
        if (indicator) {
            indicator.remove();
        }
    }

    /**
     * Show success notification
     */
    showSuccessNotification(results) {
        const successCount = results.filter(r => r.success).length;
        const totalCount = results.length;
        const failureCount = totalCount - successCount;
        
        let message = `📧 Email delivery completed successfully!`;
        if (successCount === totalCount) {
            message += `\n✅ ${successCount} email(s) sent successfully.`;
        } else {
            message += `\n✅ ${successCount} email(s) sent successfully.`;
            message += `\n❌ ${failureCount} email(s) failed to send.`;
        }
        
        // Show detailed results
        const details = results.map(result => {
            const status = result.success ? '✅' : '❌';
            return `${status} ${result.recipient.email} (${result.recipient.type})`;
        }).join('\n');
        
        this.showNotification(message + '\n\n' + details, successCount === totalCount ? 'success' : 'warning');
    }

    /**
     * Show error notification
     */
    showErrorNotification(errorMessage) {
        this.showNotification(`❌ Email delivery failed:\n${errorMessage}`, 'error');
    }

    /**
     * Show notification
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `email-notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-header">
                    <span class="notification-icon">
                        ${type === 'success' ? '✅' : type === 'error' ? '❌' : type === 'warning' ? '⚠️' : 'ℹ️'}
                    </span>
                    <span class="notification-title">Email Service</span>
                    <button onclick="this.closest('.email-notification').remove()" class="notification-close">✕</button>
                </div>
                <div class="notification-message">${message.replace(/\n/g, '<br>')}</div>
            </div>
        `;
        
        // Add styles if not already present
        if (!document.getElementById('email-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'email-notification-styles';
            style.textContent = `
                .email-notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    max-width: 450px;
                    min-width: 300px;
                    background: white;
                    border-radius: 12px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                    z-index: 10000;
                    animation: slideIn 0.3s ease-out;
                    overflow: hidden;
                }
                .email-notification.success {
                    border-left: 4px solid #22c55e;
                }
                .email-notification.error {
                    border-left: 4px solid #ef4444;
                }
                .email-notification.warning {
                    border-left: 4px solid #f59e0b;
                }
                .notification-header {
                    background: #f8f9fa;
                    padding: 12px 15px;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    border-bottom: 1px solid #e2e8f0;
                }
                .notification-title {
                    flex: 1;
                    font-weight: 600;
                    color: #333;
                }
                .notification-close {
                    background: none;
                    border: none;
                    font-size: 16px;
                    cursor: pointer;
                    color: #666;
                    padding: 2px;
                }
                .notification-message {
                    padding: 15px;
                    font-size: 14px;
                    color: #333;
                    line-height: 1.4;
                }
                @media (max-width: 600px) {
                    .email-notification {
                        top: 10px;
                        right: 10px;
                        left: 10px;
                        max-width: none;
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(notification);
        
        // Auto-remove after 10 seconds for success/info, 15 seconds for errors
        const autoRemoveDelay = type === 'error' ? 15000 : 10000;
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }
        }, autoRemoveDelay);
    }

    /**
     * Track email delivery for analytics
     */
    trackEmailDelivery(results, formData) {
        try {
            const deliveryStats = {
                action: 'email_delivery_completed',
                timestamp: new Date().toISOString(),
                total_recipients: results.length,
                successful_deliveries: results.filter(r => r.success).length,
                failed_deliveries: results.filter(r => !r.success).length,
                customer_email_sent: results.some(r => r.recipient.type === 'customer' && r.success),
                company_email_sent: results.some(r => r.recipient.type === 'company' && r.success),
                customer_name_provided: !!formData['customer-name'],
                has_next_maintenance_reminder: !!formData['auto-schedule-reminder']
            };
            
            // Track individual deliveries
            results.forEach(result => {
                this.deliveryHistory.push({
                    ...result,
                    formData: {
                        customerName: formData['customer-name'],
                        serviceDate: formData['service-date']
                    }
                });
            });
            
            // Send to analytics service (if available)
            if (window.hvacJack && window.hvacJack.trackUsage) {
                window.hvacJack.trackUsage('maintenance_form_email_delivery', deliveryStats);
            }
            
            console.log('📊 Email Delivery Analytics:', deliveryStats);
        } catch (error) {
            console.warn('Email analytics tracking failed:', error);
        }
    }

    /**
     * Get delivery history
     */
    getDeliveryHistory() {
        return this.deliveryHistory;
    }

    /**
     * Clear delivery history
     */
    clearDeliveryHistory() {
        this.deliveryHistory = [];
    }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = EmailService;
} else {
    window.EmailService = EmailService;
}